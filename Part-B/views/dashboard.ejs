<!DOCTYPE html>
<html lang="en">

<head>
    <title>flight_Bord</title>
    <link rel="shortcut icon" href="./icons/favicon.ico" />

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" type="text/css" href="style.css">

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.0.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.min.css">

    <!-- Reference to the Bing Maps SDK -->
    <script type='text/javascript'
        src='http://www.bing.com/api/maps/mapcontrol?callback=GetMap&key=Am7ABZsl1hVs093AjZV82C3wxd-NCQ-KtBLpdtv4uB1UBvqIx7vcgN7Dw1A9RpQt'
        async defer></script>

    <script type="text/javascript">
        var containerA = {};
        var containerB = {};
        let counterA = 0;
        let counterB = 0;
        var map = null;


        function initSocket() {

            //socket is global
            socket = io.connect();
            alert("connected");
            setMap();
            startTime();
            containerA = {};
            containerB = {};
            counterA = 0;
            counterB = 0;

            const fligh = (l1, l2, l3) => {

                let location1 = l1;
                let location2 = l2;
                let location3 = l3;

                let fly = { location1, location2, location3 };

                return fly;
            }

            socket.on('new_flight', function (msg) {
                //console.log(JSON.stringify(msg));
                let flight = fligh(msg.location1, msg.location2, msg.location3);
                if (msg.direction == 0) {
                    containerA[counterA++] = flight;
                    myFunction(msg.TZ, msg.arrivel, msg.src, msg.dest);
                }
                else {
                    containerB[counterB++] = flight;
                    myFunction1(msg.TZ, msg.arrivel, msg.src, msg.dest);

                }
                document.getElementById('counterA').innerHTML = counterA;
                document.getElementById('counterB').innerHTML = counterB;

                //console.log(counter);
            });

            socket.on('allData', function (msg) {
            });
            socket.on("weather", function (msg) {
                console.log(JSON.stringify(msg));
                document.getElementById("tempeture").innerHTML = msg.temp;
                //document.getElementById("icon").innerHTML = msg.icon;
                var icon = msg.icon;
                document.getElementById("iconIMG").src = "./icons/"+msg.icon+".png";
                document.getElementById("description").innerHTML = JSON.parse(msg.description);

                


            });
            socket.on("newConnection", function (msg) {
                var containerA = {};
                var containerB = {};
                let counterA = 0;
                let counterB = 0;
            });



            //var counter = document.getElementById("counter");
            var count = 0;
            function setMap() {
                map = new Microsoft.Maps.Map(document.getElementById("myMap"), { credentials: "Aj-ABRf9OVQpNZTlbfu4v4yw8RWjR5Zl_XXEd0IUlAVAKKbg9vbr5ZCp6VvnLDTV" });
            }
        }

        function resetInfo() {
            socket.emit('resetDB');
        }

        function add() {
            //init();  
            //console.log(container[1]);
            var loc1 = new Microsoft.Maps.Location(containerA[0].location1, containerA[0].location2);
            var pin1 = new Microsoft.Maps.Pushpin(loc1);
            map.setView({ center: loc1, zoom: 4 });
            //console.log("add method"+" "+counter); 
            for (let i = 0; i < counterA; i++) {
                loc1 = new Microsoft.Maps.Location(containerA[i].location1, containerA[i].location2);
                if (containerA[i].location3 < 90) {
                    pin4 = new Microsoft.Maps.Pushpin(loc1, {
                        icon: "./icons/pl1.png"
                    });
                    map.entities.push(pin4);
                }
                else if (containerA[i].location3 < 180) {
                    pin4 = new Microsoft.Maps.Pushpin(loc1, {
                        icon: "./icons/pl2.png"

                    });
                    map.entities.push(pin4);
                }
                else if (containerA[i].location3 < 270) {
                    pin4 = new Microsoft.Maps.Pushpin(loc1, {
                        icon: "./icons/pl3.png"

                    });
                    map.entities.push(pin4);
                }
                else if (containerA[i].location3 < 360) {
                    pin4 = new Microsoft.Maps.Pushpin(loc1, {
                        icon: "./icons/pl4.png"

                    });
                    map.entities.push(pin4);
                }
            }

            for (let i = 0; i < counterB; i++) {
                loc1 = new Microsoft.Maps.Location(containerB[i].location1, containerB[i].location2);
                if (containerB[i].location3 < 90) {
                    pin4 = new Microsoft.Maps.Pushpin(loc1, {
                        icon: "./icons/pl1.png"
                    });
                    map.entities.push(pin4);
                }
                else if (containerB[i].location3 < 180) {
                    pin4 = new Microsoft.Maps.Pushpin(loc1, {
                        icon: "./icons/pl2.png"

                    });
                    map.entities.push(pin4);
                }
                else if (containerB[i].location3 < 270) {
                    pin4 = new Microsoft.Maps.Pushpin(loc1, {
                        icon: "./icons/pl3.png"

                    });
                    map.entities.push(pin4);
                }
                else if (containerB[i].location3 < 360) {
                    pin4 = new Microsoft.Maps.Pushpin(loc1, {
                        icon: "./icons/pl4.png"

                    });
                    map.entities.push(pin4);
                }
            }



        }





        function move() {
            for (var i = map.entities.getLength() - 1; i >= 0; i--) {
                var pushpin = map.entities.get(i);
                if (pushpin instanceof Microsoft.Maps.Pushpin) {
                    map.entities.removeAt(i);
                }
            }
        }



    </script>
</head>

<body>

    <body onload="initSocket()">
        <img id="img-plane" src="./icons/flights (1).png" width="160" alt="logo">
        <p class="borderexample"><a id="txt"></p>


        <div id="b3">
            <link rel="stylesheet" href="./stylesheets/styleWeather.css">
            <div class="container">
                <div class="notification"> </div>
                <div class="weather-container">
                    <div class="weather-icon" id="icon">
                        <img id = "iconIMG" src="./icons/unknown.png" alt="">
                    </div>
                    <div class="temperature-description">
                        <p><a id = "description"></a></p>
                    </div>
                    <div class="temperature-value">
                        <p><a id="tempeture"></a>°<span>C</span></p>
                    </div>
                </div>
            </div>
        </div>

        <script>
            function myFunction(x1, x2, x3, x4) {
                let table = document.getElementById("myTable");
                let row = table.insertRow(-1);
                let cell1 = row.insertCell(0);
                let cell2 = row.insertCell(1);
                let cell3 = row.insertCell(2);
                let cell4 = row.insertCell(3);

                cell1.innerHTML = x1;
                cell2.innerHTML = x2;
                cell3.innerHTML = x3;
                cell4.innerHTML = x4;
            }
        </script>
        <script>
            function myFunction1(x1, x2, x3, x4) {
                let table = document.getElementById("myTable1");
                let row = table.insertRow(-1);
                let cell1 = row.insertCell(0);
                let cell2 = row.insertCell(1);
                let cell3 = row.insertCell(2);
                let cell4 = row.insertCell(3);

                cell1.innerHTML = x1;
                cell2.innerHTML = x2;
                cell3.innerHTML = x3;
                cell4.innerHTML = x4;
            }
        </script>


        <button id="myBtn" class="button-17" role="button">
            <a class="textb2">טיסות ממתינות להמראה </bar>
                <a class="count" id="counterA">
        </button>
        <button id="myBtn1" class="button-18" role="button">
            <a class="textb2">טיסות ממתינות לנחיתה </bar>
                <a class="count" id="counterB">
        </button>

        <p style="position:unset" id="myMap"></p>
        <button id="remove" onclick="move()">הסר אייקונים</button>
        <button id="add" onclick="add()">הוסף אייקונים</button>

        <!-- the table for containerA -->
      
        <div id="myModal" class="modal">
            <!-- Modal content -->
            <div class="modal-content">
                <span class="close">&times;</span>
                <table id="myTable">
                    <thead>
                        <th>ID</th>
                        <th>Ecspected landing</th>
                        <th>src</th>
                        <th>destenation</th>
                    </thead>
                </table>
            </div>
        </div>

        <script>
            var modal = document.getElementById("myModal");
            var btn = document.getElementById("myBtn");
            var span = document.getElementsByClassName("close")[0];
            btn.onclick = function () {
                modal.style.display = "block";
            }
            span.onclick = function () {
                modal.style.display = "none";
            }
            window.onclick = function (event) {
                if (event.target == modal) {
                    modal.style.display = "none";
                }
            }
        </script>


        <!-- containerB Model -->

        <div id="myModal" class="modal">
            <!-- Modal content -->
            <div class="modal-content">
                <span class="close">&times;</span>
                <table id="myTable1">
                    <thead>
                        <th>ID</th>
                        <th>Ecspected landing</th>
                        <th>src</th>
                        <th>destenation</th>
                    </thead>
                </table>
            </div>
        </div>

        <script>
            var modal = document.getElementById("myModal");
            var btn = document.getElementById("myBtn1");
            var span = document.getElementsByClassName("close")[0];
            btn.onclick = function () {
                modal.style.display = "block";
            }
            span.onclick = function () {
                modal.style.display = "none";
            }
            window.onclick = function (event) {
                if (event.target == modal) {
                    modal.style.display = "none";
                }
            }
        </script>








        <script>
            function startTime() {
                const today = new Date();
                let h = today.getHours();
                let m = today.getMinutes();
                let s = today.getSeconds();
                m = checkTime(m);
                s = checkTime(s);
                document.getElementById('txt').innerHTML = h + ":" + m + ":" + s;
                setTimeout(startTime, 1000);
            }

            function checkTime(i) {
                if (i < 10) { i = "0" + i };  // add zero in front of numbers < 10
                return i;
            }
        </script>



    </body>

</body>


</html>